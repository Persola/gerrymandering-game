{"version":3,"file":"index.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,+BAA+B;AAC/B,uCAAuC;AACvC,8BAA8B;;AAE9B;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,iCAAiC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM,OAAO;AACb;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,cAAc,GAAG,cAAc;AAC5D;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,iCAAiC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAA0B,6BAA6B;AACvD;AACA;AACA,0BAA0B,6BAA6B;AACvD;AACA;AACA;;AAEA;AACA,0BAA0B,+BAA+B;AACzD;;AAEA,4BAA4B,+BAA+B;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,+BAA+B;AAC/B,KAAK;;AAEL;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,2BAA2B,iCAAiC;AAC5D,6BAA6B,iCAAiC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,8BAA8B,0BAA0B;;AAExD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,8CAA8C,qBAAqB;AACnE;AACA,qCAAqC;AACrC,sCAAsC;AACtC,mCAAmC;AACnC,qCAAqC;AACrC;AACA,4CAA4C,qBAAqB,GAAG,qBAAqB;AACzF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,8BAA8B,MAAM;AACpC,MAAM;AACN;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yCAAyC,OAAO;AAChD,MAAM;AACN;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,aAAa,6BAA6B;AAC1C,aAAa,8BAA8B;AAC3C;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,kBAAkB;AAClB,6BAA6B;AAC7B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,4BAA4B,wBAAwB;AACpD;;AAEA;AACA,4BAA4B,wBAAwB;AACpD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,iCAAiC;AACxD;AACA;AACA;AACA;AACA;AACA,4BAA4B,oBAAoB,2BAA2B;AAC3E,4BAA4B,oBAAoB,2BAA2B;AAC3E;AACA;AACA;AACA,OAAO;AACP;AACA,2BAA2B;AAC3B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,MAAM;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,WAAW;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA","sources":["webpack://lolla-gerrymandering-game/./src/index.js"],"sourcesContent":["const DIST_ID_TO_COLOR = {\n  0: '00af91',\n  1: 'cc7351',\n  2: 'fa963d',\n  3: '8040b0',\n  4: 'd860b0',\n  5: 'e0b020',\n  6: '504090',\n  7: '966060',\n  8: '11698e',\n  9: '608040',\n  10: 'f6c065',\n  11: '8b6ea3',\n  12: 'eb596e',\n  13: '9dad7f',\n  14: 'e27802',\n  15: '51a2b5',\n  16: 'd6b0b1',\n  17: 'ec4646',\n  18: '007965',\n  19: '4d375d',\n  20: 'f1aa9b',\n  21: '557174',\n  22: '96cb7c',\n  23: '007981',\n  24: 'f8dc81'\n};\n\nconst $ = document.querySelector.bind(document);\nconst $$ = document.querySelectorAll.bind(document);\n\nconst assignVoterIndicatorClass = 'assignVoterIndicator';\n\n// INITIALIZE STATE\n\nconst mapConfig = {\n  percentParty0: 0.5,\n  numDistricts: Number($('#numDist').value),\n  votersPerDistrict: Number($('#votersPerDist').value)\n};\n\nlet appState = {\n  partyColors: [],\n  selectedDistrictId: null,\n  hoveredDistrictId: null,\n  hoveringOnSlot: false,\n  invalidHeadcountDistrictIds: [],\n  buttonHighlighted: false\n};\nappState.partyColors[0] = $('#party0color').value;\nappState.partyColors[1] = $('#party1color').value;\n\n// dummy interval to start\nlet timerInterval = setInterval(() => null, 100);\n\n// Double nested array of voter data (see generateVoters)\nconst voters = [];\nconst origVoters = [];\nlet districtCounts = {};\n\n// PURE FUNCTIONS OF STATE\n\nlet rootNumDistricts = () => { return mapConfig.numDistricts**(1/2) };\nlet rootNumVotersPerDistrict = () => { return mapConfig.votersPerDistrict**(1/2) };\nlet rootTotalVoters = () => { return rootNumDistricts() * rootNumVotersPerDistrict() };\n\n// LOAD SOUND\n\nconst clickFoley = new Audio('./click.mp3');\nconst crunchFoley = new Audio('./crunch.m4a');\n\nconst resultFromDistrictCount = (districtCount) => {\n  if (districtCount.party0 > districtCount.party1) {\n    return 'party0';\n  }\n\n  if (districtCount.party0 < districtCount.party1) {\n    return 'party1';\n  }\n\n  if (districtCount.party0 !== districtCount.party1) {\n    throw error(\"what's up with this district count?\");\n  }\n\n  return 'tie';\n};\n\nconst playCrunchIfConvertedDistrict = (oldCount, newCount) => {\n  let districtChanged = false;\n\n  for (distId of Object.keys(newCount)) {\n    if (\n      resultFromDistrictCount(oldCount[distId])\n      !== resultFromDistrictCount(newCount[distId])\n    ) {\n      districtChanged = true;\n    }\n  }\n\n  if (districtChanged) { crunchFoley.play(); };\n};\n\nconst countVoters = (voterAssignment) => {\n  const newCount = countFromVoters(voters);\n  if (voterAssignment) {\n    playCrunchIfConvertedDistrict(districtCounts, newCount);\n  }\n  districtCounts = newCount;\n};\n\nconst countFromVoters = (voters) => {\n  const counts = {};\n  for (let distId = 0; distId < mapConfig.numDistricts; distId++) {\n    counts[distId] = {};\n    counts[distId].party0 = 0;\n    counts[distId].party1 = 0;\n  }\n  perVoter(voters, (voter) => {\n    counts[voter.districtId][voter.partyAffiliation] += 1;\n  });\n\n  return counts;\n};\n\nconst overallCount = (distCounts) => {\n  const count = {\n    party0: 0,\n    party1: 0,\n    tied: 0\n  };\n\n  for (dCount of Object.values(distCounts)) {\n    if (dCount.party0 > dCount.party1) {\n      count.party0 ++;\n    } else if (dCount.party0 < dCount.party1) {\n      count.party1 ++;\n    } else { // tie\n      count.tied ++;\n    }\n  }\n\n  return count;\n};\n\n// ?\n\nconst perVoter = (voters, lambda) => {\n  for (voterRow of voters) {\n    for (voter of voterRow) {\n      lambda(voter);\n    }\n  }\n};\n\n// STATE MANAGEMENT\n\nconst restartTimer = () => {\n  const startTime = Date.now();\n  clearInterval(timerInterval);\n  timerInterval = setInterval(() => {\n    updateTimer(startTime);\n  }, 1)\n};\n\nconst updateTimer = (startTime) => {\n  const totalMilliseconds = Date.now() - startTime;\n  const seconds = Math.floor(totalMilliseconds/1000) % 60;\n  const minutes = Math.floor(totalMilliseconds/(1000 * 60));\n  const secondsString = String(seconds).padStart(2, 0);\n  const minutesString = String(minutes).padStart(2, 0);\n  $('#timer').innerText = `${minutesString}:${secondsString}`;\n};\n\nconst updateMapConfigFromInputs = () => {\n  if (mapConfig.percentParty0 === undefined) {\n    mapConfig.percentParty0 = 0.5;\n  }\n\n  mapConfig.percentParty0 = Number($('#percentParty0').value);\n  mapConfig.numDistricts = Number($('#numDist').value);\n  mapConfig.votersPerDistrict = Number($('#votersPerDist').value);  \n};\n\nconst assignVoterToDistrict = (voterId, districtId) => {\n  clickFoley.play();\n  voters[voterId[0]][voterId[1]].districtId = districtId;\n  countVoters(true);\n  checkDistrictSizes();\n  render();\n};\n\nconst selectDistrict = (districtId) => {\n  appState.selectedDistrictId = districtId;\n  setCursor();\n};\n\nconst deselectDistrict = () => {\n  appState.selectedDistrictId = null;\n  setCursor();\n};\n\nconst checkDistrictSizes = () => {\n  appState.invalidHeadcountDistrictIds.length = 0;\n  for (let distId = 0; distId < mapConfig.numDistricts; distId++) {\n    const distTotal = districtCounts[distId].party0 + districtCounts[distId].party1;\n    if (Math.abs(mapConfig.votersPerDistrict - distTotal) > 1) {\n      appState.invalidHeadcountDistrictIds.push(distId);\n    }\n  }\n  applyDynamicStyles();\n};\n\nconst updatePartyColors = (e) => {\n  appState.partyColors[0] = $('#party0color').value;\n  appState.partyColors[1] = $('#party1color').value;\n  applyDynamicStyles();\n};\n\nconst highlightButton = () => {\n  appState.buttonHighlighted = true;\n  applyDynamicStyles();\n};\n\nconst unhighlightButton = () => {\n  appState.buttonHighlighted = false;\n  applyDynamicStyles();\n};\n\n// gen voters, map\n\nconst generate = () => {\n  updateMapConfigFromInputs();\n  if (mapConfig.numDistricts > Object.keys(DIST_ID_TO_COLOR).length) {\n    throw('I need more colors (add to DIST_ID_TO_COLOR)');\n  }\n\n  generateVoters();\n  countVoters(false);\n  setOrigVoters();\n  updateOrigHouseReport();\n  checkDistrictSizes();\n  applyDynamicStyles();\n  render();\n  clearDistrictReport();\n  restartTimer();\n};\n\nconst generateVoters = () => {\n  let totalVoters = rootTotalVoters()**2;\n  let numParty0Voters = Math.floor(totalVoters * mapConfig.percentParty0);\n  let numParty1Voters = totalVoters - numParty0Voters;\n  let voterAffiliations = [];\n  for (let party0Ind = 0; party0Ind < numParty0Voters; party0Ind++) {\n    voterAffiliations.push('party0');\n  }\n  for (let party1Ind = 0; party1Ind < numParty1Voters; party1Ind++) {\n    voterAffiliations.push('party1');\n  }\n  voterAffiliations = shuffle(voterAffiliations);\n\n  voters.length = 0;\n  for (let mapYCoord = 0; mapYCoord < rootTotalVoters(); mapYCoord++) {\n    voters[mapYCoord] = [];\n\n    for (let mapXCoord = 0; mapXCoord < rootTotalVoters(); mapXCoord++) {\n      voters[mapYCoord][mapXCoord] = {\n        voterId: [mapYCoord, mapXCoord],\n        partyAffiliation: voterAffiliations.pop(),\n        districtId: assignInitialDistrictId(mapYCoord, mapXCoord)\n      };\n    }\n  }\n};\n\nconst setOrigVoters = () => {\n  origVoters.length = 0;\n\n  voters.forEach(voterCol => {\n    const col = [];\n\n    voterCol.forEach(voter => {\n      col.push(Object.assign({}, voter));\n    });\n\n    origVoters.push(col);\n  });\n};\n\n// from https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\nconst shuffle = (array) => {\n  var currentIndex = array.length, temporaryValue, randomIndex;\n  while (0 !== currentIndex) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n};\n\nconst assignInitialDistrictId = (x, y) => {\n  // assigns voters to their initial districts\n  for (let xDistCoord = 0; xDistCoord < rootNumDistricts(); xDistCoord++) {\n    for (let yDistCoord = 0; yDistCoord < rootNumDistricts(); yDistCoord++) {\n      if (\n        (x >= rootNumVotersPerDistrict() * xDistCoord) &&\n        (x < rootNumVotersPerDistrict() * (xDistCoord + 1)) &&\n        (y >= rootNumVotersPerDistrict() * yDistCoord) &&\n        (y < rootNumVotersPerDistrict() * (yDistCoord + 1))\n      ) {\n        return (xDistCoord * rootNumDistricts()) + yDistCoord;\n      }\n    }\n  }\n  TypeError('voter coords have no corresponding district!?');\n};\n\n// EVENTS\n\nconst targetHasClass = (className, evnt) => {\n  return (\n    evnt.target.className &&\n    evnt.target.className.split(' ').includes(className)\n  )\n};\n\ndocument.body.onpointermove = (e) => {\n  if (targetHasClass('voterAffiliation', e)) {\n    updateDistrictReport(e.target.parentNode);\n    updateAssignVoterIndicator(\n      voterIsAssignable(\n        extractVoterId(e.target.parentElement.getAttribute('data-voter-id')),\n        appState.selectedDistrictId,\n        Number(e.target.parentElement.getAttribute('data-district-id'))\n      )\n      ? e.target.parentNode\n      : null\n    );\n    appState.hoveringOnSlot = false;\n  } else if (targetHasClass('voterSlot', e)) {\n    updateDistrictReport(e.target);\n    updateAssignVoterIndicator(null);\n    appState.hoveringOnSlot = true;\n  } else {\n    clearDistrictReport();\n    updateAssignVoterIndicator(null);\n    appState.hoveringOnSlot = false;\n  }\n\n  setCursor();\n};\n\nconst updateAssignVoterIndicator = (hoveredSlot) => {\n  const indicatedSlot = $(`.${assignVoterIndicatorClass}`);\n\n  if (indicatedSlot === hoveredSlot) {\n    return;\n  }\n\n  if (indicatedSlot !== null) {\n    indicatedSlot.classList.remove(assignVoterIndicatorClass);\n  }\n\n  if (hoveredSlot !== null) {\n    hoveredSlot.classList.add(assignVoterIndicatorClass);\n  }\n\n  applyDynamicStyles();\n};\n\ndocument.body.onclick = (e) => {\n  if (targetHasClass('voterAffiliation', e)) {\n    const clickedVoterId = extractVoterId(e.target.parentElement.getAttribute('data-voter-id'));\n    const replacedDistrictId = Number(e.target.parentElement.getAttribute('data-district-id'));\n    if (voterIsAssignable(clickedVoterId, appState.selectedDistrictId, replacedDistrictId)) {\n      assignVoterToDistrict(clickedVoterId, appState.selectedDistrictId);\n    }\n  } else if (targetHasClass('voterSlot', e)) {\n    selectDistrict(Number(e.target.getAttribute('data-district-id')));\n  } else if (targetHasClass('regenerateButton', e)) {\n    deselectDistrict();\n    generate();\n    unhighlightButton();\n  } else {\n    deselectDistrict();\n  }\n\n  render();\n}\n\nconst extractVoterId = idString => {\n  const match = idString.match(/(\\d+)\\-(\\d+)/);\n  return [Number(match[1]), Number(match[2])]\n};\n\nconst voterIsAssignable = (voterId, selectedDistrictId, voterOldDistrictId) => {\n  if (voterOldDistrictId === selectedDistrictId) {\n    return false;\n  }\n\n  return (\n    typeof selectedDistrictId === 'number' // a district is selected\n    && selectedDistrictWouldBeLocallyConnected(voterId, selectedDistrictId)\n    && replacedDistrictWouldBeLocallyConnected(voterId, voterOldDistrictId)\n  )\n};\n\nconst selectedDistrictWouldBeLocallyConnected = (clickedVoterId, selectedDistrictId) => {\n  /*\n    Allow or disallow assignment of individual voters to districts such that\n    across many assignments (1) districts never contain holes (voters of other\n    districts inside them) and (2) districts are never broken into unconnected\n    pieces.\n  */\n  const selectedDistrictNeighbors = detectNeighborsOfDistrict(clickedVoterId, selectedDistrictId);\n\n  if ([\n    selectedDistrictNeighbors.down,\n    selectedDistrictNeighbors.right,\n    selectedDistrictNeighbors.up,\n    selectedDistrictNeighbors.left\n  ].filter(Boolean).length === 0) {\n    /*\n      Clicked voter has no directly adjacent neighbors belonging to the selected\n      district, so it would be isolated\n    */\n    return false;\n  }\n\n  const gaps = countGaps(selectedDistrictNeighbors);\n  return gaps < 2; // multiple gaps creates a hole\n};\n\nconst replacedDistrictWouldBeLocallyConnected = (clickedVoterId, replacedDistrictId) => {\n  /*\n    Allow or disallow removal of voters from districts such that across many\n    removals the replaced district will never be broken into separate pieces.\n  */\n  const replacedDistrictNeighbors = detectNeighborsOfDistrict(clickedVoterId, replacedDistrictId);\n  const gaps = countGaps(replacedDistrictNeighbors);\n  return gaps < 2; // multiple gaps severs a district\n};\n\nconst detectNeighborsOfDistrict = (centerVoterCoords, districtId) => {\n  return {\n    down:      coordsWithinDistrict([centerVoterCoords[0] + 1, centerVoterCoords[1]    ], districtId),\n    downRight: coordsWithinDistrict([centerVoterCoords[0] + 1, centerVoterCoords[1] + 1], districtId),\n    right:     coordsWithinDistrict([centerVoterCoords[0]    , centerVoterCoords[1] + 1], districtId),\n    upRight:   coordsWithinDistrict([centerVoterCoords[0] - 1, centerVoterCoords[1] + 1], districtId),\n    up:        coordsWithinDistrict([centerVoterCoords[0] - 1, centerVoterCoords[1]    ], districtId),\n    upLeft:    coordsWithinDistrict([centerVoterCoords[0] - 1, centerVoterCoords[1] - 1], districtId),\n    left:      coordsWithinDistrict([centerVoterCoords[0]    , centerVoterCoords[1] - 1], districtId),\n    downLeft:  coordsWithinDistrict([centerVoterCoords[0] + 1, centerVoterCoords[1] - 1], districtId)\n  };\n};\n\nconst coordsWithinDistrict = (coords, districtId) => {\n  if (\n    coords[0] < 0 ||\n    coords[1] < 0 ||\n    coords[0] >= (rootTotalVoters()) ||\n    coords[1] >= (rootTotalVoters())\n  ) {\n    return false; // out of bounds, not a voter\n  }\n\n  return voters[coords[0]][coords[1]].districtId === districtId;\n};\n\nconst countGaps = (neighborsOfDistrict) => {\n  /*\n    Only cells in the four basic directions count as adjacent. Diagonals are\n    only referenced in order to do this.\n  */\n  const directions = [\n    'downRight',\n    'right',\n    'upRight',\n    'up',\n    'upLeft',\n    'left',\n    'downLeft',\n    'down',\n  ];\n\n  let inSelectedDistrict = neighborsOfDistrict.down;\n  let gaps = 0;\n\n  for (directionInd in directions) {\n    const direction = directions[directionInd];\n\n    if (inSelectedDistrict) {\n      if (!neighborsOfDistrict[direction]) {\n        inSelectedDistrict = false;\n        gaps ++;\n      }\n    } else {\n      if (\n        neighborsOfDistrict[direction] &&\n        ['down', 'right', 'up', 'left'].includes(direction)\n      ) {\n        inSelectedDistrict = true;\n      }\n    }\n  }\n\n  return gaps;\n};\n\ndocument.body.onchange = (e) => {\n  const sigDigs = 8;\n  const factor = 10**sigDigs;\n  if (targetHasClass('partyColorPicker', e)) {\n    updatePartyColors();\n  } else if (e.target.id === 'percentParty0') {\n    highlightButton();\n    $('#percentParty1').value = (\n      factor\n      - factor * Number($('#percentParty0').value)\n    ) / factor;\n  } else if (e.target.id === 'percentParty1') {\n    highlightButton();\n    $('#percentParty0').value = (\n      factor\n      - factor * Number($('#percentParty1').value)\n    ) / factor;\n  } else if (['numDist', 'votersPerDist'].includes(e.target.id)) {\n    highlightButton();\n  }\n}\n\n// RENDER\n\nconst render = () => {\n  $('#mapWrapper').replaceChild(renderMap(voters), $('#map'));\n  updateCurrentHouseReport();\n};\n\nconst renderMap = (voterData) => {\n  const mapDom = document.createElement('div');\n  mapDom.id = 'map';\n  mapDom.style['grid-template-rows'] = '60px '.repeat(rootTotalVoters());\n  mapDom.style['grid-template-columns'] = '60px '.repeat(rootTotalVoters());\n\n  for (voterRowData of voterData) {\n    for (voterData of voterRowData) {\n      mapDom.appendChild(renderVoter(voterData));\n    }\n  }\n\n  return mapDom;\n};\n\nconst renderVoter = (voterData) => {\n  const voterDOM = document.createElement('div');\n  const classList = ['voterSlot', `district-${voterData.districtId}`];\n  const sameDistrictNeighbors = detectNeighborsOfDistrict(voterData.voterId, voterData.districtId);\n  if (!sameDistrictNeighbors.down) { classList.push('district-border-bottom') }\n  if (!sameDistrictNeighbors.right) { classList.push('district-border-right') }\n  if (!sameDistrictNeighbors.up) { classList.push('district-border-top') }\n  if (!sameDistrictNeighbors.left) { classList.push('district-border-left') }\n  voterDOM.classList.add(...classList);\n  voterDOM.setAttribute('data-voter-id', `${voterData.voterId[0]}-${voterData.voterId[1]}`);\n  voterDOM.setAttribute('data-district-id', voterData.districtId);\n  const voterAffilEl = document.createElement('div');\n  voterAffilEl.classList.add('voterAffiliation', voterData.partyAffiliation);\n  voterDOM.appendChild(voterAffilEl);\n  return voterDOM;\n};\n\nconst updateCurrentHouseReport = () => {\n  $('.currentHouseReport').innerHTML = renderHouseReport(voters, 'Gerrymandered Districts');\n};\n\nconst updateOrigHouseReport = () => {\n  $('.origHouseReport').innerHTML = renderHouseReport(origVoters, 'State - Original Districts');\n};\n\nconst renderHouseReport = (votersForReport, title) => {\n  const results = overallCount(districtCounts);\n  return `\n    <div class=\"houseTitle\">${title}</div>\n    ${winnerDeclaration(results)}\n    <div class=\"partyControlReport\">\n      <div class=\"partyDistrictCount party0\">\n        ${results.party0}\n      </div>\n      districts\n    </div>\n    <div class=\"partyControlReport\">\n      <div class=\"partyDistrictCount\">\n        ${results.tied}\n      </div>\n      tied\n    </div>\n    <div class=\"partyControlReport\">\n      <div class=\"partyDistrictCount party1\">\n        ${results.party1}\n        </div>\n        districts\n    </div>\n  `\n};\n\nconst winnerDeclaration = (results) => {\n  if (results.party0 > results.party1) {\n    return `\n      <div class=\"winnerDeclaration winnerDeclarationLeft\">\n        MAJORITY\n      </div>\n    `;\n  } else if (results.party0 < results.party1) {\n    return `\n      <div class=\"winnerDeclaration winnerDeclarationRight\">\n        MAJORITY\n      </div>\n    `;\n  } else {\n    return `\n      <div class=\"winnerDeclaration winnerDeclarationTie\">\n        tie!\n      </div>\n    `;\n  }\n};\n\nconst districtReport = (distId) => {\n  const districtCount = districtCounts[distId];\n  return `\n    <div class=\"districtTitle district-${distId}\">DISTRICT</div>\n    ${winnerDeclaration(districtCount)}\n    <div class=\"partyControlReport\">\n      <div class=\"partyDistrictCount party0\">\n        ${districtCount.party0}\n      </div>\n      voters\n    </div>\n    <div class=\"partyControlReport\">\n      <div class=\"partyDistrictCount\">\n        ${districtCount.party0 + districtCount.party1}\n      </div>\n      total\n    </div>\n    <div class=\"partyControlReport\">\n      <div class=\"partyDistrictCount party1\">\n        ${districtCount.party1}\n      </div>\n      voters\n    </div>\n  `\n};\n\nconst updateDistrictReport = (voter) => {\n  const thisMoveHoveredDistrictId = Number(voter.className.match(/district\\-(\\d+)/)[1]);\n  if (appState.hoveredDistrictId !== thisMoveHoveredDistrictId) {\n    $('.districtReport').innerHTML = districtReport(thisMoveHoveredDistrictId);\n    appState.hoveredDistrictId = thisMoveHoveredDistrictId;\n  }\n};\n\nconst clearDistrictReport = () => {\n  appState.hoveredDistrictId = null;\n  $('.districtReport').innerHTML = `\n    <div class=\"hoverHeadsUp\">\n      Hover over a district\n      <br />\n      to see its vote count\n    </div>\n  `;\n};\n\n// DYNAMIC STYLING\n\nconst districtStyles = (districtId, invalidHeadcount) => {\n  if (invalidHeadcount) {\n    return `\n      .district-${districtId} {\n        background-image: repeating-linear-gradient(\n          -45deg,\n          #${DIST_ID_TO_COLOR[districtId]},\n          #${DIST_ID_TO_COLOR[districtId]} 18.675px,\n          #f00 18.675px,\n          #f00 21.25px\n        );\n      }\n    `;    \n  } else {\n    return `\n      .district-${districtId} {\n        background-color: #${DIST_ID_TO_COLOR[districtId]};\n      }\n    `;\n  }\n};\n\nconst partySplitInputBackgroundStyles = () => {\n    return `\n      .controlLine>input[class=party0] {\n        background-color: ${appState.partyColors[0]}88;\n      }\n\n      .controlLine>input[class=party1] {\n        background-color: ${appState.partyColors[1]}88;\n      }\n    `;\n};\n\nconst buttonStyle = (highlight) => {\n  if (highlight) {\n    return `\n      .regenerateButton {\n      \tbackground-color: #f0c911;\n        border: 2px solid #e54;\n      \tcolor: #b32;\n      }\n      .regenerateButton:hover {\n      \tbackground-color: #f4d415;\n        border: 2px solid #e54;\n        color: #c43;\n      }\n    `;\n  } else {\n    return `\n      .regenerateButton {\n      \tbackground-color: #ee8;\n      \tborder: 2px solid #995;\n      \tcolor: #b32;\n      }\n      .regenerateButton:hover {\n      \tbackground-color: #ff9;\n        border: 2px solid #aa6;\n        color: #c43;\n      }\n    `;\n  }\n};\n\nconst applyDynamicStyles = () => {\n  let styleText = '';\n  for (let distId = 0; distId < mapConfig.numDistricts; distId++) {\n    styleText += districtStyles(\n      distId,\n      appState.invalidHeadcountDistrictIds.includes(distId)\n    );\n  }\n  styleText += `\\n.party0 { background-color: ${appState.partyColors[0]}; }`;\n  styleText += `\\n.party1 { background-color: ${appState.partyColors[1]}; }`;\n  styleText += partySplitInputBackgroundStyles();\n  styleText += buttonStyle(appState.buttonHighlighted);\n  styleText += `\n    .${assignVoterIndicatorClass} {\n      background-image: none;\n      background-color: #${DIST_ID_TO_COLOR[appState.selectedDistrictId]};\n    }\n  `;\n\n  const oldStyleEl = $('.dynamicStyleEl');\n  let newStyleEl = document.createElement('style');\n  newStyleEl.classList.add('dynamicStyleEl');\n  newStyleEl.innerHTML = styleText;\n  oldStyleEl.parentElement.replaceChild(newStyleEl, oldStyleEl);\n};\n\nconst setCursor = () => {\n  const emptyColor = 'ffffff';\n  const mainColor = (\n    appState.selectedDistrictId === null\n    ? emptyColor\n    : DIST_ID_TO_COLOR[appState.selectedDistrictId]\n  );\n  const secondColor = (\n    appState.hoveringOnSlot && (appState.selectedDistrictId !== appState.hoveredDistrictId)\n    ? DIST_ID_TO_COLOR[appState.hoveredDistrictId]\n    : null\n  );\n\n  $('body').style.cursor = cursorStyle(mainColor, secondColor);\n};\n\nconst cursorStyle = (color, innerColor) => {\n  const first = (\n    `url(`\n      + `\"data:image/svg+xml,%3C`\n        + `svg%20xmlns='http://www.w3.org/2000/svg'%20`\n        + `height='54'%20`\n        + `width='36'`\n      + `%3E`\n      + `%3C`\n        + `polygon%20`\n        + `points='1,0%2026,32%201,44'%20`\n        + `fill='%23${color}'%20`\n        + `stroke='black'%20`\n        + `stroke-width='2'/`\n      + `%3E`\n  )\n  const optional = (\n      `%3C`\n        + `polygon%20`\n        + `points='1,30%2018,22%2026,32%201,44'%20`\n        + `fill='%23${innerColor}'%20`\n        + `stroke='black'%20`\n        + `stroke-width='2'/`\n      + `%3E`\n  )\n  const last = `%3C/svg%3E\") 0 0, default`;\n\n  if (innerColor !== null) {\n    return first + optional + last;\n  } else {\n    return first + last;\n  }\n};\n\n// INITIALIZATION\n\nwindow.onload = (e) => {\n  generate();\n  setCursor(null);\n  restartTimer();\n};\n"],"names":[],"sourceRoot":""}